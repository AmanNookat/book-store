//? Этот файл, названный tsconfig.node.json, представляет собой файл конфигурации TypeScript. В нем содержатся настройки компилятора TypeScript, которые определяют, как TypeScript должен компилировать код

{
  "compilerOptions": {
    // compilerOptions - этот блок содержит настройки компилятора TypeScript
    "composite": true, //! читать ниже
    "skipLibCheck": true, // пропускает проверку типов для объявлений библиотек (.d.ts файлов), что может ускорить время компиляции проекта
    "module": "ESNext", // указывает, какой формат модулей должен использовать TypeScript
    "moduleResolution": "bundler", // указывает, как TS должен разрешать модули. Значение bundler  означает использование средств сборщика (Vite) для разрешения модулей
    "allowSyntheticDefaultImports": true //! читать ниже
  },
  "include": ["vite.config.ts"] // здесь указывается список файлов или папок, которые должны быть включены в процесс компиляции
}

//? "composite": true: Когда опция "composite" установлена в true, TypeScript рассматривает проект как композитный, то есть как проект, состоящий из нескольких связанных между собой частей. Это позволяет TypeScript использовать инкрементальную сборку (incremental build), при которой TypeScript анализирует только те файлы, которые были изменены, а не всю кодовую базу. Это значительно сокращает время перекомпиляции проекта при изменениях. Кроме того, в режиме композитного проекта TypeScript может выполнить более точный анализ зависимостей между файлами, что полезно при работе с большими проектами.

//? "allowSyntheticDefaultImports": true: Эта опция позволяет TypeScript использовать синтетические (или искусственные) импорты по умолчанию. В JavaScript модули могут экспортировать только одно значение по умолчанию, однако многие сторонние библиотеки могут экспортировать несколько значений или не иметь явного значения по умолчанию вовсе. Установка "allowSyntheticDefaultImports": true позволяет TypeScript преобразовывать неявные экспорты в синтетический импорт по умолчанию, что обеспечивает более единообразное использование модулей в коде. Это особенно полезно при работе с сторонними библиотеками, которые не соответствуют ожиданиям TypeScript относительно импортов по умолчанию.
